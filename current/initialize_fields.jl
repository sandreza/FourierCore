using FourierCore, FourierCore.Grid, FourierCore.Domain
using FFTW, LinearAlgebra, BenchmarkTools, Random, HDF5, ProgressBars, Statistics
using CUDA
arraytype = CuArray

rng = MersenneTwister(12345)
Random.seed!(12)
initialize = false
tend = 200.0
tstart = 1
phase_speed = sqrt(1.0) # 1.0

N = 2^7
N_ens = 2^7
Ns = (N, N, N_ens)

Œ∫ = 1e-3 # 1.0 * Œîx^2
ŒΩ = sqrt(1e-5) # 0.5 * Œîx^2
ŒΩ_h = sqrt(1e-3) # 0.001
f_amp = 400
œµ = 1.0

function load_psi!(œà)
    filename = "initial_streamfunction.hdf5"
    fid = h5open(filename, "r")
    œà .= arraytype(read(fid["psi"]))
    close(fid)
    return nothing
end



Œ© = S¬π(4œÄ)^2 √ó S¬π(1)
grid = FourierGrid(Ns, Œ©, arraytype=arraytype)
nodes, wavenumbers = grid.nodes, grid.wavenumbers
forcing_amplitude = f_amp * (N / 2^7)^2 # due to FFT nonsense

# build filter 
x = nodes[1]
y = nodes[2]
kÀ£ = wavenumbers[1]
k ∏ = wavenumbers[2]
# construct waver
kxmax = maximum(kÀ£)
kymax = maximum(kÀ£)
kxmax = kymax = 30
waver = @. (kÀ£)^2 + (k ∏)^2 ‚â§ ((kxmax / 2)^2 + (kymax / 2)^2)
waver = @. abs(kÀ£) .+ 0 * abs(k ∏) ‚â§ 2 / 3 * kxmax
@. waver = waver * (0 * abs(kÀ£) .+ 1 * abs(k ∏) ‚â§ 2 / 3 * kxmax)
waver[1, 1] = 0.0
waver[:, floor(Int, N / 2)+1] .= 0.0
waver[floor(Int, N / 2)+1, :] .= 0.0

# construct fields 
œÜ = arraytype(zeros(Ns...))
rand!(rng, œÜ)
œÜ *= 2œÄ

field = arraytype(zeros(N, N))

##
# Fields 
# velocity
œà = arraytype(zeros(ComplexF64, Ns...))
u = similar(œà)
v = similar(œà)
u‚ÇÄ = similar(œà)
v‚ÇÄ = similar(œà)

# auxiliary fields
S = arraytype(zeros(ComplexF64, size(œà)..., 2))
SÃá = arraytype(zeros(ComplexF64, size(œà)..., 2))

uŒ∏ = similar(œà)
vŒ∏ = similar(œà)
uŒ∂ = similar(œà)
vŒ∂ = similar(œà)


‚àÇÀ£Œ∏ = similar(œà)
‚àÇ ∏Œ∏ = similar(œà)
‚àÇÀ£Œ∂ = similar(œà)
‚àÇ ∏Œ∂ = similar(œà)

‚àÇÀ£uŒ∏ = similar(œà)
‚àÇ ∏vŒ∏ = similar(œà)
‚àÇÀ£uŒ∂ = similar(œà)
‚àÇ ∏vŒ∂ = similar(œà)

ùíüŒ∏ = similar(œà)
ùíüŒ∂ = similar(œà)
Œ∏Ãá = similar(œà)

k‚ÇÅ = similar(S)
k‚ÇÇ = similar(S)
k‚ÇÉ = similar(S)
k‚ÇÑ = similar(S)
SÃÉ = similar(S)

# source
sŒ∏ = similar(œà)
sŒ∂ = similar(œà)

# phase
œÜÃá = similar(œÜ)

# operators
‚àÇx = im * kÀ£
‚àÇy = im * k ∏
Œî = @. ‚àÇx^2 + ‚àÇy^2

# plan ffts
P = plan_fft!(œà, (1, 2))
P‚Åª¬π = plan_ifft!(œà, (1, 2))

# time stepping
Œîx = x[2] - x[1]
Œît = 1 / N # 1 / N # 2^(-10)# 2 / N # Œîx / (2œÄ) * 1.0
r = 0
hypoviscocity_power = 2
dissipation_power = 2
# Dissipation 
Œî = @. ‚àÇx^2 + ‚àÇy^2
Œî‚Åª¬π = 1 ./ Œî
bools = (!).(isnan.(Œî‚Åª¬π))
Œî‚Åª¬π .*= bools # hack in the fact that false * NaN = 0

ùíüŒΩ = @. -(-ŒΩ_h * Œî‚Åª¬π)^(hypoviscocity_power) - (-ŒΩ * Œî)^(dissipation_power) - r # - 1e-1 * (Œ∫ * Œî)^2 + 1e-3 * (Œ∫ * Œî)^3 - 1e-5 * (Œ∫ * Œî)^4
ùíüŒ∫ = @. Œ∫ * Œî # - 1e-1 * (Œ∫ * Œî)^2 + 1e-3 * (Œ∫ * Œî)^3 - 1e-5 * (Œ∫ * Œî)^4

##
Œ∏ = view(S, :, :, :, 1)
Œ∂ = view(S, :, :, :, 2)
@. Œ∏ = 0.0 * sin(3 * x) * sin(3 * y) + -0.1 + 0im
@. Œ∂ = sin(3 * x) * sin(3 * y)

operators = (; P, P‚Åª¬π, Œî‚Åª¬π, waver, ùíüŒΩ, ùíüŒ∫, ‚àÇx, ‚àÇy)
auxiliary = (; œà, x, y, œÜ, u, v, uŒ∂, vŒ∂, uŒ∏, vŒ∏, ‚àÇÀ£Œ∂, ‚àÇ ∏Œ∂, ‚àÇÀ£Œ∏, ‚àÇ ∏Œ∏, ‚àÇÀ£uŒ∂, ‚àÇ ∏vŒ∂, ‚àÇÀ£uŒ∏, ‚àÇ ∏vŒ∏, ùíüŒ∏, ùíüŒ∂, sŒ∏, sŒ∂)
constants = (; forcing_amplitude=forcing_amplitude, œµ = œµ)# (; œÑ = 0.01, e = 0.01)
parameters = (; auxiliary, operators, constants)

# initialize
if initialize != true
    load_psi!(œà)
    Œ∂ .= ifft(Œî .* fft(œà))
end
sŒ∏ .= 0.0

##
function rhs!(SÃá, S, parameters)
    Œ∏Ãá = view(SÃá, :, :, :, 1)
    Œ∂Ãá = view(SÃá, :, :, :, 2)
    Œ∏ = view(S, :, :, :, 1)
    Œ∂ = view(S, :, :, :, 2)

    (; P, P‚Åª¬π, Œî‚Åª¬π, waver, ùíüŒΩ, ùíüŒ∫, ‚àÇx, ‚àÇy) = parameters.operators
    (; œà, x, y, œÜ, u, v, uŒ∂, vŒ∂, uŒ∏, vŒ∏, ‚àÇÀ£Œ∂, ‚àÇ ∏Œ∂, ‚àÇÀ£Œ∏, ‚àÇ ∏Œ∏, ‚àÇÀ£uŒ∂, ‚àÇ ∏vŒ∂, ‚àÇÀ£uŒ∏, ‚àÇ ∏vŒ∏, ùíüŒ∏, ùíüŒ∂, sŒ∏, sŒ∂) = parameters.auxiliary
    (; forcing_amplitude, œµ) = parameters.constants

    # construct source for vorticity 
    # @. sŒ∂ = œà
    sŒ∂ .= waver .* forcing_amplitude .* exp.(im .* œÜ)
    P‚Åª¬π * sŒ∂

    P * Œ∏ # in place fft Œ∂
    P * Œ∂ # in place fft
    # grab stream function from vorticity
    @. œà = Œî‚Åª¬π * Œ∂
    # ‚àá·µñœà
    @. u = (‚àÇy * œà)
    @. v = -1.0 * (‚àÇx * œà)
    # ‚àáŒ∂
    @. ‚àÇÀ£Œ∏ = ‚àÇx * Œ∏
    @. ‚àÇ ∏Œ∏ = ‚àÇy * Œ∏
    @. ‚àÇÀ£Œ∂ = ‚àÇx * Œ∂
    @. ‚àÇ ∏Œ∂ = ‚àÇy * Œ∂
    # Dissipation
    @. ùíüŒ∂ = ùíüŒΩ * Œ∂
    @. ùíüŒ∏ = ùíüŒ∫ * Œ∏
    # go back to real space 
    P‚Åª¬π * u
    P‚Åª¬π * v
    P‚Åª¬π * Œ∂
    P‚Åª¬π * ‚àÇÀ£Œ∂
    P‚Åª¬π * ‚àÇ ∏Œ∂
    P‚Åª¬π * ùíüŒ∂
    P‚Åª¬π * Œ∏
    P‚Åª¬π * ‚àÇÀ£Œ∏
    P‚Åª¬π * ‚àÇ ∏Œ∏
    P‚Åª¬π * ùíüŒ∏
    # construct conservative form 
    @. uŒ∂ = u * Œ∂
    @. vŒ∂ = v * Œ∂
    @. uŒ∏ = u * Œ∏
    @. vŒ∏ = v * Œ∏
    # in place fft 
    P * uŒ∂
    P * vŒ∂
    P * uŒ∏
    P * vŒ∏
    # ‚àá‚ãÖ(u‚ÉóŒ∂)
    @. ‚àÇÀ£uŒ∂ = ‚àÇx * uŒ∂
    @. ‚àÇ ∏vŒ∂ = ‚àÇy * vŒ∂
    # ‚àá‚ãÖ(u‚ÉóŒ∏)
    @. ‚àÇÀ£uŒ∏ = ‚àÇx * uŒ∏
    @. ‚àÇ ∏vŒ∏ = ‚àÇy * vŒ∏
    # in place ifft 
    P‚Åª¬π * ‚àÇÀ£uŒ∂
    P‚Åª¬π * ‚àÇ ∏vŒ∂
    P‚Åª¬π * ‚àÇÀ£uŒ∏
    P‚Åª¬π * ‚àÇ ∏vŒ∏

    # rhs
    @. Œ∂Ãá = real((-u * ‚àÇÀ£Œ∂ - v * ‚àÇ ∏Œ∂ - ‚àÇÀ£uŒ∂ - ‚àÇ ∏vŒ∂) * 0.5 + ùíüŒ∂ + sŒ∂)
    @. Œ∏Ãá = real((-u * ‚àÇÀ£Œ∏ - v * ‚àÇ ∏Œ∏ - ‚àÇÀ£uŒ∏ - ‚àÇ ∏vŒ∏) * 0.5 * œµ + ùíüŒ∏ + sŒ∏)
    @. S = real(S)
    @. SÃá = real(SÃá)

    return nothing
end

function step!(S, SÃÉ, œÜ, œÜÃá, k‚ÇÅ, k‚ÇÇ, k‚ÇÉ, k‚ÇÑ, Œît, rng, parameters)
    rhs!(k‚ÇÅ, S, parameters)
    @. SÃÉ = S + Œît * k‚ÇÅ * 0.5
    randn!(rng, œÜÃá)
    @. œÜ += phase_speed * sqrt(Œît / 2) * œÜÃá # now at t = 0.5
    rhs!(k‚ÇÇ, SÃÉ, parameters)
    @. SÃÉ = S + Œît * k‚ÇÇ * 0.5
    rhs!(k‚ÇÉ, SÃÉ, parameters)
    @. SÃÉ = S + Œît * k‚ÇÉ
    randn!(rng, œÜÃá)
    @. œÜ += phase_speed * sqrt(Œît / 2) * œÜÃá # now at t = 1.0
    rhs!(k‚ÇÑ, SÃÉ, parameters)
    @. S += Œît / 6 * (k‚ÇÅ + 2 * k‚ÇÇ + 2 * k‚ÇÉ + k‚ÇÑ)
    return nothing
end
##
iend = ceil(Int, tend / Œît)
start_index = floor(Int, tstart / Œît)
eulerian_list = Float64[]
lagrangian_list = Float64[]
eke_list = Float64[]

iter = ProgressBar(1:iend)
if initialize
    for i = iter
        # fourth order runge-kutta on deterministic part
        # keep œà frozen is the correct way to do it here

        # the below assumes that œÜ is just a function of time
        rhs!(k‚ÇÅ, S, parameters)
        @. SÃÉ = S + Œît * k‚ÇÅ * 0.5

        # œÜ_rhs_normal!(œÜÃá, œÜ, rng)
        randn!(rng, œÜÃá)
        @. œÜ += phase_speed * sqrt(Œît / 2) * œÜÃá # now at t = 0.5

        rhs!(k‚ÇÇ, SÃÉ, parameters)
        @. SÃÉ = S + Œît * k‚ÇÇ * 0.5
        rhs!(k‚ÇÉ, SÃÉ, parameters)
        @. SÃÉ = S + Œît * k‚ÇÉ

        # œÜ_rhs_normal!(œÜÃá, œÜ, rng)
        randn!(rng, œÜÃá)
        @. œÜ += phase_speed * sqrt(Œît / 2) * œÜÃá # now at t = 1.0

        rhs!(k‚ÇÑ, SÃÉ, parameters)
        @. S += Œît / 6 * (k‚ÇÅ + 2 * k‚ÇÇ + 2 * k‚ÇÉ + k‚ÇÑ)

        t[1] += Œît

        if i == start_index
            Œ∏ .= u
            u‚ÇÄ .= u
        end
        if (i > start_index) && (i % 10 == 0)
            if i % 4000 == 0
                # decorrelates after 2000 timesteps
                Œ∏ .= u
            end
            uu = real(mean(u .* u‚ÇÄ))
            uŒ∏ = real(mean(u .* Œ∏))

            push!(eulerian_list, uu)
            push!(lagrangian_list, uŒ∏)
            push!(eke_list, real(0.5 * mean(u .* u + v .* v)))

            Œ∏_min, Œ∏_max = extrema(real.(Œ∏))
            Œ∂_min, Œ∂_max = extrema(real.(Œ∂))
            set_multiline_postfix(iter, "Œ∏_min: $Œ∏_min \nŒ∏_max: $Œ∏_max \nŒ∂_min: $Œ∂_min \nŒ∂_max: $Œ∂_max")
        end


    end
end

if initialize
    filename = "initial_streamfunction.hdf5"
    fid = h5open(filename, "w")
    P‚Åª¬π * œà
    fid["psi"] = Array(œà)
    close(fid)
end

#=
if initialize
    using GLMakie
    fig2 = Figure()

    ax = Axis(fig2[1, 1])
    A_Œ∂ = Array(real.(Œ∂))
    tmp = quantile(abs.(extrema(A_Œ∂))[:], 0.1)
    ax2 = Axis(fig2[1, 2])
    A_Œ∏ = Array(real.(Œ∏))
    tmp2 = quantile(abs.(extrema(A_Œ∏))[:], 0.1)

    sl_x = Slider(fig2[2, 1:2], range=1:N_ens, startvalue=1)
    o_index = sl_x.value

    field = @lift Array(Œ∂[:, :, $o_index])
    heatmap!(ax, field, colormap=:balance, colorrange=(-tmp, tmp), interpolate=false)

    field2 = @lift Array(Œ∏[:, :, $o_index])
    heatmap!(ax2, field2, colormap=:balance, colorrange=(-tmp2, tmp2), interpolate=false)
    display(fig2)
end
=#