using FourierCore, FourierCore.Grid, FourierCore.Domain
using FFTW, LinearAlgebra, BenchmarkTools, Random, JLD2
using GLMakie
rng = MersenneTwister(1234)
# Random.seed!(123456789)
Random.seed!(12)
# jld_name = "high_order_timestep_spatial_tracer_"
jld_name = "blocky"
include("transform.jl")
include("random_phase_kernel.jl")
# using GLMakie
using CUDA
arraytype = CuArray
Œ© = S¬π(2œÄ)^2
N = 2^7 # number of gridpoints
grid = FourierGrid(N, Œ©, arraytype=arraytype)
nodes, wavenumbers = grid.nodes, grid.wavenumbers

x = nodes[1]
y = nodes[2]
kÀ£ = wavenumbers[1]
k ∏ = wavenumbers[2]
# construct filter
kxmax = maximum(kÀ£)
kymax = maximum(kÀ£)
filter = @. (kÀ£)^2 + (k ∏)^2 ‚â§ ((kxmax / 2)^2 + (kymax / 2)^2)
filter = @. abs(kÀ£) .+ 0 * abs(k ∏) ‚â§ 2/3 * kxmax 
@. filter = filter * ( 0 * abs(kÀ£) .+ 1 * abs(k ∏) ‚â§ 2/3 * kxmax )

# now define the random field 
wavemax = 5
ùìÄ = arraytype([-wavemax, wavemax]) # arraytype(1.0 .* [-wavemax, -wavemax + 1, wavemax - 1, wavemax])# arraytype(collect(-wavemax:1:wavemax))
ùìÄÀ£ = reshape(ùìÄ, (length(ùìÄ), 1))
ùìÄ ∏ = reshape(ùìÄ, (1, length(ùìÄ)))
# A = @. 0.1 * (ùìÄÀ£ * ùìÄÀ£ + ùìÄ ∏ * ùìÄ ∏)^(-11 / 12)
A = @. 1.0 * (ùìÄÀ£ * ùìÄÀ£ + ùìÄ ∏ * ùìÄ ∏)^(0.0) # @. 1e-1 / (1 * 2 * wavemax^2) .* (ùìÄÀ£ * ùìÄÀ£ + ùìÄ ∏ * ùìÄ ∏)^(0.0) # ( 1 .+ (0 .* ùìÄÀ£) .* ùìÄ ∏) 
A[A.==Inf] .= 0.0
œÜ = arraytype(2œÄ * rand(size(A)...))
field = arraytype(zeros(N, N))

##
# Fields 
# velocity
œà = arraytype(zeros(ComplexF64, N, N))
u = similar(œà)
v = similar(œà)

# theta
Œ∏ = similar(œà)
‚àÇÀ£Œ∏ = similar(œà)
‚àÇ ∏Œ∏ = similar(œà)
Œ∫ŒîŒ∏ = similar(œà)
Œ∏Ãá = similar(œà)
s = similar(œà)
Œ∏ÃÖ = similar(œà)
k‚ÇÅ = similar(œà)
k‚ÇÇ = similar(œà)
k‚ÇÉ = similar(œà)
k‚ÇÑ = similar(œà)
Œ∏ÃÉ = similar(œà)

# source
s = similar(œà)
@. s = cos(kÀ£[5] * x)

# phase
œÜÃá = similar(A)

# operators
‚àÇx = im * kÀ£
‚àÇy = im * k ∏
Œî = @. ‚àÇx^2 + ‚àÇy^2
Œî‚Åª¬π = 1 ./ Œî
bools = (!).(isnan.(Œî‚Åª¬π))
Œî‚Åª¬π .*= bools # hack in the fact that false * NaN = 0

# plan ffts
P = plan_fft!(œà)
P‚Åª¬π = plan_ifft!(œà)

# number of gridpoints in transition is about Œª * N / 2
bump(x; Œª=10 / N, width=œÄ / 2) = 0.5 * (tanh((x + width / 2) / Œª) - tanh((x - width / 2) / Œª))
bumps(x; Œª=20 / N, width=1.0) = 0.25 * (bump(x, Œª=Œª, width=width) + bump(x, Œª=Œª, width=2.0 * width) + bump(x, Œª=Œª, width=3.0 * width) + bump(x, Œª=Œª, width=4.0 * width))

##
Œîx = x[2] - x[1]
Œ∫ = 1.0 / N * 0.1 # * 2^(2)  # roughly 1/N for this flow
# Œ∫ = 2 / 2^8 # fixed diffusivity
# Œ∫ = 2e-4
Œît = Œîx / (2œÄ) * 1

Œ∫ = 1.0 * Œîx^2 # /Œît  # 1.0 / N * 0.1 # * 2^(2)  # roughly 1/N for this flow

# take the initial condition as negative of the source
tic = Base.time()

# save some snapshots
œà_save = typeof(real.(Array(œà)))[]
Œ∏_save = typeof(real.(Array(œà)))[]

r_A = Array(@. sqrt((x - œÄ)^2 + (y - œÄ)^2))
Œ∏_A = [bumps(r_A[i, j]) - 3.0 for i in 1:N, j in 1:N]
Œ∏ .= CuArray(Œ∏_A)
Œ∏ .= @. 0.1 * sin(3 * x) * sin(3 * y) + 0im
# @. Œ∏ = bump(sqrt(x^2 + y^2)) # scaling so that source is order 1
Œ∏clims = extrema(Array(real.(Œ∏))[:])
P * Œ∏ # in place fft
@. Œ∫ŒîŒ∏ = Œ∫ * Œî * Œ∏
P‚Åª¬π * Œ∫ŒîŒ∏ # in place fft
s .= -Œ∫ŒîŒ∏ * 0.0
P‚Åª¬π * Œ∏ # in place fft
Œ∏ÃÖ .= 0.0

t = [0.0]
tend = 200 # 5000

phase_speed = 1.0

iend = ceil(Int, tend / Œît)

#=
function Œ∏_rhs_moisture!(Œ∏Ãá, Œ∏, params)
    #(; œà, A, ùìÄÀ£, ùìÄ ∏, x, y, œÜ, u, v, ‚àÇÀ£Œ∏, ‚àÇ ∏Œ∏, s, P, P‚Åª¬π, filter) = params
    œà, A, ùìÄÀ£, ùìÄ ∏, x, y, œÜ, u, v, ‚àÇÀ£Œ∏, ‚àÇ ∏Œ∏, s, P, P‚Åª¬π, filter = params
    œÑ = 0.01
    e = 0.01
    event = stream_function!(œà, A, ùìÄÀ£, ùìÄ ∏, x, y, œÜ)
    wait(event)
    P * œà # in place fft
    P * Œ∏ # in place fft
    # ‚àá·µñœà
    @. u = filter * -1.0 * (‚àÇy * œà)
    @. v = filter * (‚àÇx * œà)
    # ‚àáŒ∏
    @. ‚àÇÀ£Œ∏ = filter * ‚àÇx * Œ∏
    @. ‚àÇ ∏Œ∏ = filter * ‚àÇy * Œ∏
    @. Œ∫ŒîŒ∏ = Œ∫ * Œî * Œ∏ # (Œ∫ * Œî  - (Œ∫ * Œî)^2 ) * Œ∏
    # go back to real space 
    P‚Åª¬π * œà
    P‚Åª¬π * Œ∏
    P‚Åª¬π * u
    P‚Åª¬π * v
    P‚Åª¬π * ‚àÇÀ£Œ∏
    P‚Åª¬π * ‚àÇ ∏Œ∏
    P‚Åª¬π * Œ∫ŒîŒ∏
    # construct source 
    @. s = v + e - 1 / œÑ * Œ∏ * (real(Œ∏) > 0)
    # Assemble RHS
    @. Œ∏Ãá = -u * ‚àÇÀ£Œ∏ - v * ‚àÇ ∏Œ∏ + Œ∫ŒîŒ∏ + s
    return nothing
end
=#


function Œ∏_rhs_moisture!(Œ∏Ãá, Œ∏, params)
    #(; œà, A, ùìÄÀ£, ùìÄ ∏, x, y, œÜ, u, v, ‚àÇÀ£Œ∏, ‚àÇ ∏Œ∏, s, P, P‚Åª¬π, filter) = params
    œà, A, ùìÄÀ£, ùìÄ ∏, x, y, œÜ, u, v, ‚àÇÀ£Œ∏, ‚àÇ ∏Œ∏, s, P, P‚Åª¬π, filter, Œî‚Åª¬π = params
    œÑ = 0.01
    e = 0.01
    event = stream_function!(œà, A, ùìÄÀ£, ùìÄ ∏, x, y, œÜ)
    wait(event)
    # @. œà = cos(4 * x)
    @. s = œà 
    P * œà # in place fft
    P * Œ∏ # in place fft
    # quick hack 
    @. œà = Œî‚Åª¬π * Œ∏
    # ‚àá·µñœà
    @. u = filter *  (‚àÇy * œà)
    @. v = filter * -1.0 * (‚àÇx * œà)
    # ‚àáŒ∏
    @. ‚àÇÀ£Œ∏ = filter * ‚àÇx * Œ∏
    @. ‚àÇ ∏Œ∏ = filter * ‚àÇy * Œ∏
    @. Œ∫ŒîŒ∏ = (Œî‚Åª¬π + Œ∫ * Œî - 1e-1 * (Œ∫ * Œî)^2 + 1e-3 * (Œ∫ * Œî)^3 - 1e-5 * (Œ∫ * Œî)^4) * Œ∏ # Œ∫ * Œî - 0.1 * (Œ∫ * Œî)^2 + 0.01 * (Œ∫ * Œî)^3) * Œ∏ # Œ∫ * Œî * Œ∏ #
    # go back to real space 
    P‚Åª¬π * œà
    P‚Åª¬π * Œ∏
    P‚Åª¬π * u
    P‚Åª¬π * v
    P‚Åª¬π * ‚àÇÀ£Œ∏
    P‚Åª¬π * ‚àÇ ∏Œ∏
    P‚Åª¬π * Œ∫ŒîŒ∏
    # construct source 
    # @. s = œà# v + e - 1 / œÑ * Œ∏ * (real(Œ∏) > 0)
    # Assemble RHS
    @. Œ∏Ãá = real(-u * ‚àÇÀ£Œ∏ - v * ‚àÇ ∏Œ∏ + Œ∫ŒîŒ∏ + s)
    @. Œ∏ = real(Œ∏)
    #
    # P * Œ∏Ãá    # in place fft
    # @. Œ∏Ãá = 0 * Œ∏Ãá
    # P‚Åª¬π * Œ∏Ãá
    return nothing
end


params = (; œà, A, ùìÄÀ£, ùìÄ ∏, x, y, œÜ, u, v, ‚àÇÀ£Œ∏, ‚àÇ ∏Œ∏, s, P, P‚Åª¬π, filter, Œî‚Åª¬π)

size_of_A = size(A)

realizations = 1
for j in 1:realizations
    # Œ∏ .= CuArray(Œ∏_A)
    for i = 1:iend
        # fourth order runge kutta on deterministic part
        # keep œà frozen is the correct way to do it here

        # the below assumes that œÜ is just a function of time
        Œ∏_rhs_moisture!(k‚ÇÅ, Œ∏, params)
        @. Œ∏ÃÉ = Œ∏ + Œît * k‚ÇÅ * 0.5

        œÜ_rhs_normal!(œÜÃá, œÜ, rng)
        @. œÜ += phase_speed * sqrt(Œît / 2) * œÜÃá

        Œ∏_rhs_moisture!(k‚ÇÇ, Œ∏ÃÉ, params)
        @. Œ∏ÃÉ = Œ∏ + Œît * k‚ÇÇ * 0.5
        Œ∏_rhs_moisture!(k‚ÇÉ, Œ∏ÃÉ, params)
        @. Œ∏ÃÉ = Œ∏ + Œît * k‚ÇÉ

        œÜ_rhs_normal!(œÜÃá, œÜ, rng)
        @. œÜ += phase_speed * sqrt(Œît / 2) * œÜÃá

        Œ∏_rhs_moisture!(k‚ÇÑ, Œ∏ÃÉ, params)
        @. Œ∏ += Œît / 6 * (k‚ÇÅ + 2 * k‚ÇÇ + 2 * k‚ÇÉ + k‚ÇÑ)

        # update stochastic part 
        # œÜ_rhs_normal!(œÜÃá, œÜ, rng)
        # @. œÜ += sqrt(Œît) * œÜÃá


        t[1] += Œît
        # save output

        #=
        if i % div(iend, 10) == 0
            println("Saving at i=", i)
            push!(œà_save, Array(real.(œà)))
            push!(Œ∏_save, Array(real.(Œ∏)))
            println("extrema are ", extrema(Œ∏_save[end]))
            println("time is t = ", t[1])
        end

        if t[1] >= tstart
            Œ∏ÃÖ .+= Œît * Œ∏
        end

        if i % div(iend, 100) == 0
            println("time is t = ", t[1])
            local toc = Base.time()
            println("the time for the simulation is ", toc - tic, " seconds")
            println("extrema are ", extrema(real.(Œ∏)))
            println("on wavenumber index ", index_choice)
        end
        =#
        if i % div(iend, 100) == 0
            println("time is t = ", t[1])
            local toc = Base.time()
            println("the time for the simulation is ", toc - tic, " seconds")
            println("extrema are ", extrema(real.(Œ∏)))
            # println("on wavenumber index ", index_choice)
        end

    end
    println("finished realization ", j)
    @. Œ∏ÃÖ += Œ∏ / realizations
end

toc = Base.time()
println("the time for the simulation was ", toc - tic, " seconds")

# calculate vorticity
P * œà # in place fft
@. Œ∫ŒîŒ∏ = Œî * œà
P‚Åª¬π * Œ∫ŒîŒ∏ # in place fft

x_A = Array(x)[:] .- 2œÄ
Œ∏_F = Array(real.(Œ∏))
œà_F = Array(real.(œà))
œâ_F = Array(real.(Œ∫ŒîŒ∏))
Œ∏ÃÖ_F = Array(real.(Œ∏ÃÖ))

fig = Figure(resolution=(2048, 512))
ax1 = Axis(fig[1, 1], title="moisture t = 0")
ax2 = Axis(fig[1, 2], title="moisture t = " * string(tend))
ax3 = Axis(fig[1, 4], title="vorticity t = " * string(tend))
println("the extrema of the end field is ", extrema(Œ∏_F))
println("the extrema of the ensemble average is ", extrema(Œ∏ÃÖ_F))
colormap = :bone_1
# colormap = :nipy_spectral
colorrange = (-1, 0)
colorrange2 = extrema(Œ∏_F)
colorrange3 = (-maximum(œâ_F), maximum(œâ_F))
heatmap!(ax1, x_A, x_A, Œ∏_A, colormap=colormap, colorrange=colorrange2, interpolate=true)
hm = heatmap!(ax2, x_A, x_A, Œ∏_F, colormap=colormap, colorrange=colorrange2, interpolate=true)
hm_e = heatmap!(ax3, x_A, x_A, œâ_F, colormap=:balance, colorrange=colorrange3, interpolate=true)
Colorbar(fig[1, 3], hm, height=Relative(3 / 4), width=25, ticklabelsize=30, labelsize=30, ticksize=25, tickalign=1,)
Colorbar(fig[1, 5], hm_e, height=Relative(3 / 4), width=25, ticklabelsize=30, labelsize=30, ticksize=25, tickalign=1,)
display(fig)
